#include<bits/stdc++.h>

using namespace std;

const int N = 1e5 + 10;
const char answer[126][20] = {
  "",
  "-1",
  "-1",
  "-1",
  "-1",
  "-1",
  "-1",
  "-1",
  "-1",
  "3 6 6 6",
  "-1",
  "-1",
  "-1",
  "3 9 10 10",
  "3 9 10 10",
  "3 9 10 10",
  "-1",
  "3 12 14 14",
  "3 12 14 14",
  "3 10 15 15",
  "3 10 15 15",
  "3 10 15 15",
  "3 10 15 15",
  "3 10 15 15",
  "3 10 15 15",
  "3 10 15 15",
  "3 14 20 21",
  "3 14 20 21",
  "3 14 20 21",
  "3 15 21 21",
  "3 15 21 21",
  "3 14 21 25",
  "3 14 21 25",
  "3 10 28 28",
  "3 10 28 28",
  "3 10 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 14 28 28",
  "3 15 44 44",
  "3 15 44 44",
  "3 15 44 44",
  "3 15 44 44",
  "3 15 44 44",
  "3 15 44 44",
  "3 21 44 44",
  "3 22 44 49",
  "3 22 44 49",
  "3 22 44 49",
  "3 22 44 49",
  "3 21 44 55",
  "3 21 44 55",
  "3 21 44 55",
  "3 21 44 55",
  "3 20 52 52",
  "3 21 44 55",
  "3 22 44 49",
  "3 22 44 49",
  "3 22 44 49",
  "3 22 44 49",
  "3 22 44 49",
  "3 22 44 49",
  "3 14 66 66",
  "3 14 66 66",
  "3 14 66 66",
  "3 14 66 66",
  "3 14 66 66",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 21 65 65",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 66 77",
  "3 21 102 102",
  "3 21 102 102",
  "3 21 102 102",
  "3 21 102 102",
  "3 21 102 102",
  "3 21 102 102",
  "3 21 102 102",
  "3 21 102 102",
  "3 21 102 102",
  "3 21 102 102",
  "3 21 102 102",
  "3 22 66 77",
  "3 22 66 77",
  "3 22 91 91",
  "3 22 91 91",
  "3 22 91 91",
  "3 22 91 91"
};

int tt, n;
bool is_prime[N];

int main() {
#ifdef get_table
  freopen("table.out", "w", stdout);
  for (int n = 1; n <= 125; ++n) {
    for (int i = 2; i < n; ++i) {
      for (int j = i; j < n; ++j) {
        for (int k = j; k < n; ++k) {
          int x = i * j * k, t = 0;
          for (int p = n - 1; x >= n && p > 1; --p) {
            for (; x % p == 0; x /= p, ++t);
          }
          if (x != 1) {
            ++t;
          }
          if (t > 3) {
            printf("  \"3 %d %d %d\",\n", i, j, k);
            goto end_p;
          }
        }
      }
    }
    printf("  \"-1\",\n");
    end_p: continue;
  }
  return 0;
#endif
  vector<int> primes;
  memset(is_prime, true, sizeof is_prime);
  for (int i = 2; i <= 1e5; ++i) {
    if (is_prime[i]) {
      primes.push_back(i);
    }
    for (auto v : primes) {
      if (i * v > 1e5) {
        break;
      }
      is_prime[i * v] = false;
    }
  }
  scanf("%d", &tt);
  while (tt--) {
    scanf("%d", &n);
    if (n <= 125) {
      printf("%s\n", answer[n]);
    } else {
      int x = (int) sqrt(n) + 1, y = (int) pow(n, 1.0 / 3);
      for (; !is_prime[x]; ++x);
      for (; !is_prime[y]; --y);
      assert(x * y < n);
      assert(x * x >= n);
      assert(y * y * y < n);
      assert(x < y * y);
      printf("3 %d %d %d\n", x * y, x * y, x * y);
    }
  }
  return 0;
}
